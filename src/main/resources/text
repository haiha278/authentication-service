package blog.collection.auth_service.dto;

import lombok.Data;

@Data
public class UserMessage {
    private String name;
    private String email;
    private String phoneNumber;
    private String avatar;
    private boolean status;
}

------------------------------------------------------------------------------------------------------------------------------------


@Service
@RequiredArgsConstructor
@Slf4j
public class AuthenticationServiceImpl implements AuthenticationService {
    private final UserRepository userRepository;
    private final UserAuthMethodRepository userAuthMethodRepository;
    private final RoleRepository roleRepository;
    private final EmailUtils emailUtils;
    private final Validate validate;
    private final PasswordEncoder passwordEncoder;
    private final JwtTokenProvider tokenProvider;
    private final AuthenticationManager authenticationManager;
    private final RabbitTemplate rabbitTemplate;
    private static final Logger logger = LoggerFactory.getLogger(AuthenticationServiceImpl.class);

    private void sendVerificationEmail(User user, String username, String password) throws MessagingException {
        emailUtils.sendToVerifyEmail(user, username, password);
    }

    public BaseResponse<LocalLoginResponseDTO> loginLocalUser(LoginDTO loginDTO) {
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginDTO.getUsername(), loginDTO.getPassword())
        );
        SecurityContextHolder.getContext().setAuthentication(authentication);

        UserAuthMethod userInfo = userAuthMethodRepository
                .findByUsernameAndAuthProvider(loginDTO.getUsername(), AuthProvider.LOCAL)
                .orElseThrow(() -> new UsernameNotFoundException(CommonString.USERNAME_NOT_FOUND));

        String token = tokenProvider.generateToken(
                userInfo.getUsername(),
                AuthProvider.LOCAL,
                userInfo.getUser().getId(),
                userInfo.getId()
        );
        String refreshToken = tokenProvider.generateRefreshToken(
                userInfo.getUsername(),
                AuthProvider.LOCAL,
                userInfo.getUser().getId(),
                userInfo.getId()
        );

        LocalLoginResponseDTO localLoginResponseDTO = new LocalLoginResponseDTO(userInfo.getUsername(), token, refreshToken);
        return new BaseResponse<>(HttpStatus.OK.value(), "Login successful", localLoginResponseDTO);
    }

    public BaseResponse<String> verifyEmail(AddLocalAuthenticationUserRequestDTO addLocalAuthenticationUserRequestDTO) {
        try {
            validate.validateRegistrationInput(addLocalAuthenticationUserRequestDTO);

            if (userAuthMethodRepository.existsByUsername(addLocalAuthenticationUserRequestDTO.getUsername())) {
                throw new CreatedLocalUserFailException(CommonString.USERNAME_IS_EXISTED);
            }

            String userEmail = addLocalAuthenticationUserRequestDTO.getEmail();
            if (userRepository.existsByEmail(userEmail)) {
                if (userAuthMethodRepository.existsByAuthProviderAndUser(AuthProvider.LOCAL, userRepository.findByEmail(userEmail).get())) {
                    throw new CreatedLocalUserFailException(CommonString.EMAIL_IS_EXISTED);
                }
            }

            User user = Mapper.mapDtoToEntity(addLocalAuthenticationUserRequestDTO, User.class);
            sendVerificationEmail(user, addLocalAuthenticationUserRequestDTO.getUsername(), addLocalAuthenticationUserRequestDTO.getPasswordHash());
            return new BaseResponse<>(HttpStatus.OK.value(), HttpStatus.OK.getReasonPhrase(), CommonString.SEND_MESSAGE_TO_EMAIL_SUCCESSFULLY);
        } catch (InputValidationException e) {
            return new BaseResponse<>(HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), e.getMessage());
        } catch (MessagingException e) {
            throw new CannotSendMessageException(CommonString.CAN_NOT_SEND_EMAIL);
        }
    }

    @Override
    @Transactional
    public AddLocalAuthenticationUserResponseDTO addUserAuthentication(String token) {
        try {
            UserVerificationData data = validate.verifyToken(token, UserVerificationData.class);
            User inputUserFromRedis = data.getUser();

            // Tạo message để gửi qua RabbitMQ
            UserMessage userMessage = new UserMessage();
            userMessage.setName(inputUserFromRedis.getName());
            userMessage.setEmail(inputUserFromRedis.getEmail());
            userMessage.setPhoneNumber(inputUserFromRedis.getPhoneNumber());
            userMessage.setAvatar(inputUserFromRedis.getAvatar());
            userMessage.setStatus(true);

            // Gửi message và nhận User ID từ User Service
            Long userId = (Long) rabbitTemplate.convertSendAndReceive(
                "user.exchange",          // Exchange
                "user.create",            // Routing key
                userMessage,              // Message
                message -> {
                    message.getMessageProperties().setReplyTo("user.create.reply.queue"); // Reply Queue
                    return message;
                }
            );

            if (userId == null) {
                throw new CreatedLocalUserFailException("Failed to create user in User Service");
            }

            // Lưu UserAuthMethod với User ID nhận được
            UserAuthMethod userAuthMethod = new UserAuthMethod();
            userAuthMethod.setUser(new User(userId)); // Sử dụng User ID từ User Service
            userAuthMethod.setRole(roleRepository.findByRoleName(RoleName.ROLE_USER)
                    .orElseThrow(() -> new RuntimeException("Role not found")));
            userAuthMethod.setAuthProvider(AuthProvider.LOCAL);
            userAuthMethod.setUsername(data.getUsername());
            userAuthMethod.setPasswordHash(passwordEncoder.encode(data.getPassword()));
            UserAuthMethod savedLocalAuthenticationUser = userAuthMethodRepository.saveAndFlush(userAuthMethod);

            return Mapper.mapEntityToDto(savedLocalAuthenticationUser, AddLocalAuthenticationUserResponseDTO.class);
        } catch (Exception e) {
            logger.error("Error occurred while adding user authentication: ", e);
            throw new CreatedLocalUserFailException(CommonString.CAN_NOT_CREATE_NEW_USER);
        }
    }

    public BaseResponse<String> handleLoginSuccessByO2Auth(OAuth2User oAuth2User) {
        String providerUserId = oAuth2User.getAttribute("sub") != null ? oAuth2User.getAttribute("sub") : oAuth2User.getAttribute("id");
        UserAuthMethod userAuthMethod = userAuthMethodRepository.findByProviderUserIdAndAuthProvider(providerUserId, AuthProvider.GOOGLE).orElseThrow(() -> new OAuth2AuthenticationException(CommonString.CAN_NOT_LOGIN_BY_GOOGLE));
        String token = tokenProvider.generateToken(userAuthMethod.getUsername(), AuthProvider.GOOGLE, userAuthMethod.getUser().getId(), userAuthMethod.getId());
        return new BaseResponse<>(HttpStatus.OK.value(), CommonString.LOGIN_SUCCESSFULLY, token);
    }
}



2. User Service
-------------------------------------------------------------------------------------------------
package blog.collection.user_service.dto;

import lombok.Data;

@Data
public class UserMessage {
    private String name;
    private String email;
    private String phoneNumber;
    private String avatar;
    private boolean status;
}

---------------------------------------------------------------------------------------

public class UserService {

    @Autowired
    private UserRepository userRepository;

    @RabbitListener(queues = "user.create.queue")
    public Long handleUserCreation(UserMessage userMessage) {
        // Tạo đối tượng User từ message
        User user = new User();
        user.setName(userMessage.getName());
        user.setEmail(userMessage.getEmail());
        user.setPhoneNumber(userMessage.getPhoneNumber());
        user.setAvatar(userMessage.getAvatar());
        user.setStatus(userMessage.isStatus());

        // Lưu User vào cơ sở dữ liệu
        User savedUser = userRepository.save(user);

        // Trả về User ID
        return savedUser.getId();
    }
}


---------------------------------------------------------------------------------------



package blog.collection.user_service.config;

import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.Declarables;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitMQConfig {

    @Bean
    public Declarables declarables() {
        return new Declarables(
            new DirectExchange("user.exchange"),
            new Queue("user.create.queue"),
            new Queue("user.create.reply.queue"), // Reply Queue
            new Binding("user.create.queue", Binding.DestinationType.QUEUE, "user.exchange", "user.create", null),
            new Binding("user.create.reply.queue", Binding.DestinationType.QUEUE, "user.exchange", "user.create.reply", null)
        );
    }
}